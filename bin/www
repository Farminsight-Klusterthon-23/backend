#!/usr/bin/env node

const app = require("../app")
const debug = require("debug")("prod-requests:server")
const http = require("http")
const mongoose = require("mongoose")
const startSocketServer = require("../socket/socket_server")
const { namespaceListening } = require("../socket/socket_server")
const { namespaces } = require("../socket/namespaces/index")
const { authenticate } = require("../socket/middleware/auth")

const server = http.createServer(app)
const port = normalizePort(process.env.PORT || "3000")

function startSocket() {
  const io = startSocketServer(server)

  namespaces.map((namespace) => io.of(namespace).use(authenticate))
  namespaces.map((namespace) => namespaceListening(io, namespace))
  console.log("socket listening...")
}
function startServer() {
  app.set("port", port)

  server.listen(port)
  server.on("error", onError)
  server.on("listening", () => {
    onListening()
    console.log("Listening on port: ", port)
  })
}

console.log(process.env.NODE_ENV)
mongoose
  .connect(`mongodb+srv://${process.env.DB_USERNAME}:${process.env.DB_PASSWORD}@cluster0.f8gzat2.mongodb.net/${process.env.NODE_ENV}?retryWrites=true&w=majority`
  )
  .then((conn) => {
    console.log("connected to db")
    startServer()
    startSocket()
  })

function normalizePort(val) {
  const port = parseInt(val, 10)

  if (isNaN(port)) {
    return val
  }

  if (port >= 0) {
    return port
  }

  return false
}

function onError(error) {
  if (error.syscall !== "listen") {
    throw error
  }

  const bind = typeof port === "string" ? "Pipe " + port : "Port " + port

  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges")
      process.exit(1)
      break
    case "EADDRINUSE":
      console.error(bind + " is already in use")
      process.exit(1)
      break
    default:
      throw error
  }
}

function onListening() {
  const addr = server.address()
  const bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port
  console.log(`Listening on ${bind}`)
  debug("Listening on " + bind)
}
